	-- Question 1
	-- Find the names of all reviewers who rated Gone with the Wind.
select distinct name 
from Reviewer
inner join Rating on reviewer.rID=rating.rID
inner join Movie on movie.mID=rating.mID
where movie.title='Gone with the Wind';

	-- Question 2
    -- For any rating where the reviewer is the same as the director of the movie, 
    -- return the reviewer name, movie title, and number of stars.
select Reviewer.name, movie.title, rating.stars
from rating
inner join reviewer on Reviewer.rID=rating.rID
inner join movie on rating.mID=movie.mID
where reviewer.name=movie.director;

	-- Question 3
    -- Return all reviewer names and movie names together in a single list, alphabetized. 
    -- (Sorting by the first name of the reviewer and first word in the title is fine; 
    -- no need for special processing on last names or removing "The".)
select name
from reviewer
union
select title
from movie
order by name;

	-- Question 4
    -- Find the titles of all movies not reviewed by Chris Jackson.
select movie.title
from movie
where movie.mID not in
(select distinct rating.mID from Rating
where rating.rID = (select reviewer.rID from reviewer
where reviewer.name = 'Chris Jackson'));

	-- Question 5
    -- For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. 
    -- Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.
select 
distinct Rev1.name, Rev2.name
from Reviewer Rev1, Reviewer Rev2, Rating Rat1, Rating Rat2
where 	Rev1.rID=Rat1.rID
and		Rev2.rID=Rat2.rID
and		Rat1.mID=Rat2.mID
and		Rev1.name<Rev2.name
order by Rev1.name;

	-- Question 6
    -- For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.
select reviewer.name, movie.title, rating.stars
from rating
inner join Reviewer on Rating.rID=Reviewer.rID
inner join Movie on Rating.mID=Movie.mID
where rating.stars = (select min(rating.stars) from rating);

	-- Question 7
    -- List movie titles and average ratings, from highest-rated to lowest-rated. 
    -- If two or more movies have the same average rating, list them in alphabetical order.
select movie.title, avg(rating.stars)
from movie, rating 
where movie.mID=rating.mID
group by movie.title
order by avg(rating.stars) desc, title;

	-- Question 8
    -- Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)
select reviewer.name from 
(
select rID from rating 
group by rID 
having count(rID)>=3
) as Filtered, reviewer
where Filtered.rID=reviewer.rID;

	-- Question 9
    -- Some directors directed more than one movie. 
    -- For all such directors, return the titles of all movies directed by them, along with the director name. 
    -- Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)
select movie.title, movie.director from
(
select movie.director from movie
group by director
having count(director)>1
) as Filtered, movie
where Filtered.director=Movie.director
order by Movie.director asc, movie.title;

	-- Question 10 (check again)
	-- Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query
	-- is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating
	-- and then choosing the movie(s) with that average rating.)
 SELECT mov.title, AVG(rat.stars)
 FROM movie AS mov, rating AS rat
 WHERE mov.mid = rat.mid
 GROUP BY mov.title
 HAVING AVG(rat.stars) =
 (
     SELECT MAX(avg_table.avg)
     FROM
     (
         SELECT mid, AVG(stars) AS avg
         FROM rating
         GROUP BY mid
     ) AS avg_table
 )
 ORDER BY mov.title DESC;

	-- Question 11 (check again)
	-- Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may
	-- be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating
	-- and then choosing the movie(s) with that average rating.)
 SELECT mov.title, AVG(rat.stars)
 FROM movie AS mov, rating AS rat
 WHERE mov.mid = rat.mid
 GROUP BY mov.title
 HAVING AVG(rat.stars) =
 (
     SELECT MIN(avg_table.avg)
     FROM
     (
         SELECT mid, AVG(stars) AS avg
         FROM rating
         GROUP BY mid
     ) AS avg_table
 )
 ORDER BY mov.title DESC;

	-- Question 12 (check again)
	-- For each director, return the director's name together with the title(s) of the movie(s)
	-- they directed that received the highest rating among all of their movies, 
	-- and the value of that rating. Ignore movies whose director is NULL. 
SELECT DISTINCT mov1.director, mov1.title, rat1.stars
 FROM movie AS mov1, rating AS rat1
 WHERE mov1.mid = rat1.mid
 AND mov1.director IS NOT NULL
 AND rat1.stars IN
 (
     SELECT MAX(rat2.stars)
     FROM movie AS mov2, rating AS rat2
     WHERE mov2.mid = rat2.mid
     AND mov2.director IS NOT NULL
     AND mov2.director = mov1.director
 );

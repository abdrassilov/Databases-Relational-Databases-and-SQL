	-- Question 1
    -- Find the names of all students who are friends with someone named Gabriel.
select 			hs1.name 
from 			Highschooler hs1
inner join 		friend 				on hs1.id=friend.id1
inner join 		Highschooler hs2 	on hs2.id=friend.id2
where 			hs2.name='Gabriel';

	-- Question 2
    -- For every student who likes someone 2 or more grades younger than themselves, 
    -- return that student's name and grade, and the name and grade of the student they like.
select 			hs1.name, hs1.grade, hs2.name, hs2.grade
from 			highschooler hs1
inner join		likes				on hs1.id=likes.id1
inner join		highschooler hs2	on hs2.id=likes.id2
where			(hs1.grade-hs2.grade)>=2;

	-- Question 3
    -- For every pair of students who both like each other, return the name and grade of both students. 
    -- Include each pair only once, with the two names in alphabetical order.
select 			hs1.name, hs1.grade, hs2.name, hs2.grade
from 			highschooler hs1, highschooler hs2, likes lk1, likes lk2
where 			hs1.id=lk1.id1	and		hs2.id=lk1.id2
and 			hs2.id=lk2.id1	and 	hs1.id=lk2.id2
and 			hs1.name < hs2.name
order by		hs1.name, hs2.name;

	-- Question 4
    -- Find all students who do not appear in the Likes table (as a student who likes or is liked) 
    -- and return their names and grades. Sort by grade, then by name within each grade.
select 			hs.name, hs.grade
from			highschooler hs
where			hs.id 					not in
(
select 			distinct id1			
from			likes
union			
select 			distinct id2 
from			likes
)
order by 		grade asc, hs.name;

	-- Question 5
    -- For every situation where student A likes student B, but we have no information about whom B likes 
    -- (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.
select 			distinct hs1.name, hs1.grade, hs2.name, hs2.grade
from 			highschooler hs1
inner join		likes lk 				on hs1.id=lk.id1
inner join		highschooler hs2 		on hs2.id=lk.id2
and				hs2.id					not in
(
select 			distinct id1 			from likes
);

	-- Question 6
    -- Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.
select 			hs1.name, hs1.grade
from 			highschooler hs1
where			id 						not in
(
select 			id1
from			highschooler hs2, friend fr
where			hs1.id=fr.id1
and				hs2.id=fr.id2
and				hs1.grade<>hs2.grade
)
order by		grade, name;

	-- Question 7
    -- For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). 
    -- For all such trios, return the name and grade of A, B, and C.
select 			hs1.name, hs1.grade, hs2.name, hs2.grade, hs3.name, hs3.grade
from			highschooler hs1, highschooler hs2, highschooler hs3, friend fr1, friend fr2, likes lk
where			hs1.id=lk.id1			and		hs2.id=lk.id2
and				hs2.id					not in
(
select			id2
from			friend
where			id1=hs1.id
)
and				hs1.id=fr1.id1			and		hs3.id=fr1.id2
and				hs2.id=fr2.id1			and		hs3.id=fr2.id2;

	-- Question 8
    -- Find the difference between the number of students in the school and the number of different first names.
select 			count(hs.id) - count(distinct(hs.name))
from			highschooler hs;

	-- Question 9 (Not Working in MySQL Workbench, To Be Resolved)
    -- Find the name and grade of all students who are liked by more than one other student.
SELECT name, grade
FROM Highschooler
INNER JOIN Likes ON Highschooler.ID = Likes.ID2
GROUP BY ID
HAVING COUNT(*) > 1;
